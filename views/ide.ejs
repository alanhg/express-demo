<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>WebShell IDE</title>
    <style>

      .hide {
        opacity: 0;
      }

      .loading-iframe {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        border: none;
        background-color: #1e1e1e;
      }

      .workspace-loader {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        border: none;
      }

      .workspace {
        z-index: 1;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        border: none;
      }
    </style>
</head>
<body>
<iframe src="https://cs-res-1258344699.file.myqcloud.com/cloudstudio/vscode/3e54a6f80cbf72e76cc91bb32178e6b3ede84e3f/release-standalone/out/vs/code/browser/workbench/loading.html"
        class="loading-iframe"></iframe>
<iframe id="workspace" class="workspace hide"></iframe>
<script>
  function sleep(timeout) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, timeout);
    });
  }

  const ws = new WebSocket('ws://127.0.0.1:8000/ide/<%= proxyKey %>?<%= queryParams %>');
  let agentFrameEl, tempPassword;
  ws.addEventListener('open', () => {

  });
  let startingOutput = '';
  ws.addEventListener('message', async ({data}) => {
    const options = JSON.parse(data);
    if (options.type === 'start-ide') {
      if (options.data.password) {
        tempPassword = options.data.password;
        return;
      }
      if (options.data.status === 'starting') {
        // 安装步骤
        startingOutput = `${startingOutput + options.data.message}`;
      } else if (options.data.status === 'done') {
        if (!startingOutput.match('init success')) {
          alert('启动失败');
        } else {
          const loadingEl = document.body.getElementsByClassName('loading-iframe')[0];
          await sleep(3000);
          agentFrameEl = document.getElementById('workspace');
          agentFrameEl.src = "/tty/<%= proxyKey %>/?folder=<%= folder %>";
          agentFrameEl.host = "<%= host %>";
          agentFrameEl.username = "<%= username %>/";
          agentFrameEl.classList = 'workspace hide';
          agentFrameEl.onload = () => {
            const afterIdeLoaded = () => {
              const interval = setInterval(() => {
                let editorEl = agentFrameEl.contentWindow.document.body.querySelector('[class*="monaco-workbench"]'); //编辑器
                if (editorEl) {
                  clearInterval(interval);
                  loadingEl.classList.add('hide');
                  agentFrameEl.classList.remove('hide');
                }
              }, 1000)
            }
            if (agentFrameEl.contentWindow.document.body.innerText.startsWith('error')) {
              alert(agentFrameEl.contentWindow.document.body.innerText);
              return;
            }

            let loginEl = agentFrameEl.contentWindow.document.body.querySelector('[class*="login-form"]');
            if (loginEl) {
              loginEl.querySelector("[name='password']").value = tempPassword;
              // 自定登录
              // loginEl.submit();
              loadingEl.classList.add('hide');
              agentFrameEl.classList.remove('hide');
            } else {
              afterIdeLoaded();
            }
          };
          loadingEl.parentNode.insertBefore(agentFrameEl, loadingEl);
        }
      }
    }
  });
</script>
</body>
</html>
