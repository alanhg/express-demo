<head>
    <title>xterm测试</title>
    <link href="/js/xterm.css" rel="stylesheet">
    <script src="/js/xterm.js"></script>
    <script src="/js/xterm-addon-web-links.js"></script>
    <script src="/js/xterm-addon-search.js"></script>
    <style>
        .hide {
            display: none;
        }
    </style>
</head>
<body>
<div id="terminal"></div>

<script>
  var term = new Terminal({
    rendererType: 'dom',
    minimumContrastRatio: 1,
    theme: {
      selection: '#ff9632',
    }
  });
  term.open(document.getElementById('terminal'));
  term.writeln('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
  term.writeln('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
  term.writeln('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
  term.writeln('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
  term.writeln('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
  term.writeln('https://1991421.cn');
  term.loadAddon(new WebLinksAddon.WebLinksAddon(
    (event, uri) => {
      if (event.metaKey) {
        window.open(uri);
      }
    }));
  let searchAddon = new SearchAddon.SearchAddon();
  term.loadAddon(searchAddon);
  term.attachCustomKeyEventHandler(function (event) {
    if (event.key === 'f' && event.metaKey) {
      event.preventDefault();
      new SearchAddonBar(this, searchAddon);
      return false;
    }
    return true;
  });

  class SearchAddonBar {
    constructor(term, searchAddon) {
      this.term = term;
      this.searchAddon = searchAddon;
      this.render();
    }

    render() {
      if (this.term.element.parentElement.getElementsByClassName('search-terminal').length) {
        return;
      }
      const searcherEl = document.createElement('div');
      searcherEl.className = 'search-terminal';
      searcherEl.innerHTML = `<label>
    <input focus/>
    <button>pre</button>
    <button>next</button>
    <button>x</button></label>`;
      this.term.element.parentElement.appendChild(searcherEl);
      searcherEl.children[0].focus();
      const buttonEls = searcherEl.querySelectorAll('button');
      const clickElement = searcherEl.querySelector('input');
      clickElement.addEventListener('keydown', this.onEnter.bind(this));
      buttonEls[0].addEventListener('click', this.onFindPre.bind(this));
      buttonEls[1].addEventListener('click', this.onFindNext.bind(this));
      buttonEls[2].addEventListener('click', this.onHide.bind(this));
    }

    onFindPre(event) {
      let value = event.target.parentElement.children[0].value;
      if (!value || !value.trim()) {
        return;
      }
      this.searchAddon.findPrevious(value, {
        caseSensitive: false
      });
    }

    onFindNext(event) {
      let value = event.target.parentElement.children[0].value;
      if (!value || !value.trim()) {
        return;
      }
      this.searchAddon.findNext(value, {
        caseSensitive: false,
      });
    }

    onEnter(event) {
      let value = event.target.parentElement.children[0].value;
      if (!value.trim()) {
        return;
      }
      if (event.key === 'Enter') {
        this.onFindNext(event);
      }
    }

    onHide() {
      const searchEl = this.term.element.parentElement.querySelector('.search-terminal');
      searchEl.remove();
      this.term.focus();
    }
  }

</script>
</body>
