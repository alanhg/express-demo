<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <title>express -demo</title>
    <base href="/"/>
    <link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/js-base64@3.6.1/base64.min.js"></script>
    <script src="/js/download.js"></script>
    <style>

        div.menu > a {
            display: block;
        }

        .dropzone {
            height: 100px;
            background-color: yellow;
        }
    </style>
</head>
<body>

<script>
  let fileContent;
  let filename;

  function isZip() {
    return filename.match(/\.zip$/);
  }

  function onFileChange() {
    const file = document.getElementById('myFile').files[0];
    filename = file.name;
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = (evt) => {
      console.log(evt.target.result);
      fileContent = evt.target.result.replace(/^(data:[a-z-\/]+;base64,)/, '');
    }
  }

  function onSubmit() {
    if (!fileContent) {
      alert('请先选择文件');
      return;
    }
    const xhr = new XMLHttpRequest();
    xhr.open('post', '/api/upload-file');
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.send(JSON.stringify({
      file: fileContent,
      fileType: isZip() ? 'zip' : 'sol'
    }))
  }

  function downloadFileClick(addResponseType = false) {
    const xhr = new XMLHttpRequest();

    /**
     *  可以正常下载的接口：/test/download,  /test/download-binary
     *  下载无法正常解压接口: /test/download-str
     */
    xhr.open('get', '/test/download-str');
    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    xhr.setRequestHeader("name", "11");
    xhr.onload = () => {
      if (xhr.status === 200) {
        saveFile(xhr.response);
      }
    }
    if (addResponseType) {
      xhr.responseType = 'blob';
    }
    xhr.send();
  }

  function downloadFileBase64Click() {
    const xhr = new XMLHttpRequest();
    xhr.open('get', '/test/download-base64');
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.onload = () => {
      if (xhr.status === 200) {
        saveBase64File(JSON.parse(xhr.response).content);
      }
    }
    xhr.send();
  }

  function saveFile(content) {
    const a = document.createElement("a");
    const file = new Blob([content], {type: 'application/zip'});
    a.href = URL.createObjectURL(file);
    a.download = 'test.zip';
    a.click();
  }

  function saveBase64File(content) {
    const a = document.createElement("a");
    a.href = 'data:application/zip;base64,' + content;
    a.download = 'test.zip';
    a.click();
  }

</script>

<div>
    <input id="myFile" type="file" accept=".zip,.sol" onchange="onFileChange()">
    <button type="button" onclick="onSubmit()">上传</button>
    <h3>
        下载文件测试
    </h3>
    <div>
        <button onclick="downloadFileClick()">下载文件-Binary</button>
        <button onclick="downloadFileBase64Click()">下载文件-DataURL</button>
        <button onclick="downloadFileClick(true)">下载文件-Binary-前端指定responseType</button>
    </div>
</div>
<div class="menu">
    <a href="/xterm">terminal test</a>
    <a href="/shortcuts">shortcuts test</a>
</div>

<input id="myFolder" type="file" webkitdirectory onchange="onFolderChange(event)">


<div id="drop-target-container" class="dropzone"></div>

<script>
  function onFolderChange(event) {
    console.log(event);
  }

  const el = document.querySelector("[id='drop-target-container']");
  el.addEventListener("drop", event => {
    event.preventDefault();
    event.stopPropagation();
    return false;
    console.log('Class: , Function: , Line 133, Param: ', event);
  });
  el.addEventListener("dragenter", event => {
    event.preventDefault();
    event.stopPropagation();
  });
  el.addEventListener("dragover", event => {
    event.preventDefault();
    event.stopPropagation();
    return false;
  });
  el.addEventListener("drop", event => {
    event.preventDefault();
    event.stopPropagation();
    if (event.dataTransfer.files.length) {
      console.log('Class: , Function: , Line 153, Param: ', event.dataTransfer.files);
      // event.dataTransfer.files[0].arrayBuffer().then(() => {
      //
      // }).catch(console.error);
      const reader = new FileReader();
      reader.readAsArrayBuffer(event.dataTransfer.files[0]);
      reader.onload = function () {
        console.log('read ok', reader.result);
      }
      reader.onerror = function (e) {
        console.error('read error', e.target.error);
      }
    }
    return false;
  });
</script>
</body>
</html>
